{
  "metadata": {
    "filename": "motif_memory_manager.py",
    "version": "1.1.1",
    "schema_version": "2025-Q3-motif-memory-v1.1",
    "author": "Noor Collective Labs",
    "license": "GPL-2.0",
    "description": "Thread-safe motif memory manager for Noor, handling STMM/LTMM decay, dyad completion via REEF, promotion/demotion thresholds, and observability via trace journaling.",
    "rfc_references": [
      "RFC‑0003: Noor Core Symbolic Interface",
      "RFC‑0004: Symbolic Tool Module Contracts",
      "RFC‑0005: Motif Transmission Across Time",
      "RFC‑0007: Motif Ontology Format and Transfer Protocols"
    ]
  },
  "constants": {
    "DEFAULT_ST_HALF_LIFE": 25,
    "DEFAULT_LT_HALF_LIFE": 10000,
    "DEFAULT_PROMOTION_THRESH": 0.9,
    "DEFAULT_DEMOTION_DELTA": 0.05,
    "TRACE_BUFFER_LEN": 256,
    "STMM_SOFT_CAP": 50000,
    "DEFAULT_CACHE_SIZE": 10000
  },
  "functions": {
    "_decay_factor": {
      "params": ["half_life: int"],
      "returns": "float",
      "description": "Calculates decay factor using exponential half-life. [RFC‑0005 §2.1]"
    },
    "_default_jaccard": {
      "params": ["a: set[str]", "b: set[str]"],
      "returns": "float",
      "description": "Calculates Jaccard similarity between motif sets. [RFC‑0007 §4.2]"
    },
    "get_global_memory_manager": {
      "params": [],
      "returns": "MotifMemoryManager",
      "description": "Returns a singleton instance of the memory manager. [RFC‑0003 §1.3]"
    }
  },
  "classes": {
    "MotifMemoryTrace": {
      "description": "Ring-buffer journal of memory access and transformation events. [RFC‑0004 §3.3]",
      "methods": {
        "__init__": {
          "params": ["cap: int = TRACE_BUFFER_LEN"]
        },
        "append": {
          "params": ["event: dict"],
          "description": "Appends an event dictionary to the trace. [RFC‑0004 §5.1]"
        },
        "export": {
          "returns": "List[dict]",
          "description": "Returns a list of trace events. [RFC‑0004 §5.1]"
        }
      }
    },
    "MotifMemoryManager": {
      "description": "Dual-layer motif memory system with decay, salience-based promotion, LRU dyad completion, and REEF integration. [RFC‑0003 §2.3]",
      "init_params": [
        "stmm_half_life",
        "ltmm_half_life",
        "promotion_thresh",
        "demotion_delta",
        "similarity_fn",
        "enable_trace",
        "reef_path",
        "agent_id",
        "stmm_soft_cap",
        "reload_reef_on_mtime_change",
        "cache_size"
      ],
      "methods": {
        "update_cycle": {
          "description": "Runs decay and applies promotion/demotion logic. [RFC‑0005 §3.2]"
        },
        "access": {
          "params": ["motif_id: str", "boost: float = 0.2"],
          "description": "Boosts STMM weight for accessed motif. [RFC‑0005 §3.3]"
        },
        "retrieve": {
          "params": ["query_motif: str", "top_k: int = 3", "exclude_stmm: bool = True"],
          "returns": "List[str]",
          "description": "Returns top-k motifs most similar to the query. [RFC‑0007 §4.3]"
        },
        "complete_dyad": {
          "params": ["dyad: Tuple[str, str]", "top_k: int = 1"],
          "returns": "List[str]",
          "description": "Attempts REEF completion for motif dyad. [RFC‑0007 §5.2]"
        },
        "suggest_completion_from_ltmm": {
          "params": ["dyad: Tuple[str, str]", "top_k: int = 1"],
          "returns": "List[str]",
          "description": "Suggests motif completions using LTMM patterns. [RFC‑0005 §4.1]"
        },
        "export_state": {
          "returns": "Tuple[Dict[str, float], Dict[str, float]]",
          "description": "Returns shallow copies of STMM and LTMM. [RFC‑0003 §5.1]"
        },
        "export_trace": {
          "returns": "List[dict]",
          "description": "Returns current trace log if enabled. [RFC‑0004 §5.1]"
        }
      },
      "private_helpers": [
        "_apply_decay",
        "_promote_and_demote",
        "_log",
        "_load_reef_reflections"
      ],
      "internal_locks": [
        "_tlock: threading.RLock",
        "_alock: asyncio.Lock"
      ]
    }
  },
  "public_exports": [
    "MotifMemoryTrace",
    "MotifMemoryManager",
    "get_global_memory_manager"
  ],
  "main_test": {
    "description": "Sanity test simulating repeated motif access and update cycles. [RFC‑0004 §6.1]"
  }
}
