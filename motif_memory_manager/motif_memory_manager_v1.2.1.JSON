{
  "file": "motif_memory_manager.py",
  "version": "v1.2.1",
  "schema_version": "2025-Q3-motif-memory-v1.2",
  "author": "Noor Collective Labs",
  "license": "MIT",
  "purpose": "RFC-compliant symbolic memory engine that models motif access, field-curved recall, and triadic inheritance across recursive temporal cycles. It forms the symbolic cortex of Noor, responsible for continuity, resonance tracking, and motif decay dynamics.",
  "constants": {
    "DEFAULT_ST_HALF_LIFE": 25,
    "DEFAULT_LT_HALF_LIFE": 10000,
    "DEFAULT_PROMOTION_THRESH": 0.9,
    "DEFAULT_DEMOTION_DELTA": 0.05,
    "TRACE_BUFFER_LEN": 256,
    "STMM_SOFT_CAP": 50000,
    "DEFAULT_CACHE_SIZE": 10000
  },
  "functions": {
    "_decay_factor": {
      "params": ["half_life: int"],
      "returns": "float",
      "description": "Computes exponential decay multiplier per update cycle"
    },
    "_default_jaccard": {
      "params": ["a: set[str]", "b: set[str]"],
      "returns": "float",
      "description": "Returns Jaccard similarity between motif token sets"
    },
    "get_global_memory_manager": {
      "params": [],
      "returns": "MotifMemoryManager",
      "description": "Initializes or returns a singleton global memory manager with tracing enabled"
    }
  },
  "classes": {
    "MotifMemoryTrace": {
      "description": "Time-indexed circular buffer for motif event traces (access, retrieve, promote, demote)",
      "methods": {
        "__init__": { "params": ["cap: int = TRACE_BUFFER_LEN"] },
        "append": {
          "params": ["event: dict"],
          "description": "Appends structured event with timestamp, motif, and context to the ring buffer"
        },
        "export": {
          "params": [],
          "returns": "List[dict]",
          "description": "Returns the chronologically ordered list of recorded memory events"
        }
      }
    },
    "MotifMemoryManager": {
      "description": "Dual-layer adaptive memory engine with REEF-aware dyad completion, decay dynamics, triadic motif linkage, emission-based continuity tracking, and density-aware recall adaptation.",
      "init_params": [
        "stmm_half_life: int",
        "ltmm_half_life: int",
        "promotion_thresh: float",
        "demotion_delta: float",
        "similarity_fn: Callable",
        "enable_trace: bool",
        "reef_path: Optional[str]",
        "agent_id: Optional[str]",
        "stmm_soft_cap: int",
        "reload_reef_on_mtime_change: bool",
        "cache_size: int",
        "ontology_path: Optional[str]"
      ],
      "fields": [...],
      "methods": {
        "__init__": {},
        "access": {...},
        "retrieve": {...},
        "update_cycle": {"description": "RFC‑0006 §4.3"},
        "export_state": {...},
        "export_trace": {...},
        "log_emission": {"description": "RFC‑0006 §4.1"},
        "compute_lambda": {"description": "RFC‑0007 §4.2"},
        "log_adjacency": {"description": "RFC‑0006 §4.3, RFC‑0007 §5"},
        "prune": {"description": "RFC‑0006 §4.3"},
        "export_density_report": {"description": "RFC‑0006 §4"},
        "export_ontology_bundle": {"description": "RFC‑0007 §6"},
        "complete_dyad": {...},
        "suggest_completion_from_ltmm": {...},
        "query_reef_for_completion": {...},
        "load_ontology_bundle": {"description": "RFC‑0007 §3.2"}
      },
      "private_helpers": ["_apply_decay", "_promote_and_demote", "_log", "_load_reef_reflections"]
    },
    "LLMMemoryManager": {
      "inherits": "MotifMemoryManager",
      "description": "LLM-compatible symbolic memory engine with stateless access, adaptive recall, attention-based motif weighting, and REEF-integrated completion through LLM interface. (RFC‑0005 §3.2, RFC‑0006 §4.2)",
      "methods": {
        "access_with_attention": {
          "params": ["motif: str", "attn_score: float", "pos_bias: float"],
          "description": "Applies a salience-weighted boost based on LLM attention dynamics"
        },
        "store_llm_context": {
          "params": ["prompt: str", "output: str"],
          "description": "Stores and compresses LLM-derived motif embeddings for stateless persistence"
        }
      }
    },
    "MemoryOrchestrator": {
      "description": "Bridge module between LLM token contexts and symbolic cortex, optionally using SymbolicAdapterLayer. (RFC‑0004 §1, RFC‑0005 §1.1)",
      "methods": {
        "store": {"params": ["llm_context: str"]},
        "extract_motifs": {"params": ["context: str"], "description": "Via SymbolicAdapterLayer"}
      }
    }
  },
  "llm_variant": {
    "file": "motif_memory_manager_llm.py",
    "version": "v1.2.0-LLM",
    "inherits_from": "MotifMemoryManager",
    "purpose": "See LLMMemoryManager class",
    "strategy": {
      "preserve_original": true,
      "fork_llm_version": true,
      "include_memory_orchestrator": true
    },
    "modifications": {
      "stateless_architecture": true,
      "reef_query_replacement": "_load_reef_reflections() replaced with LLM-assisted query_reef_completion()",
      "trace_optional": true,
      "ontology_bundle_replay": true,
      "attention_weighting_boost": true,
      "compressed_embedding_layer": {
        "enabled": true,
        "method": "PCA or UMAP",
        "target_dim": 384
      }
    },
    "rfc_compliance": {
      "preserved": {
        "RFC‑0004 §1-3": "Symbolic tool module etiquette",
        "RFC‑0005 §1.1, 2.1, 4.1": "Trace timing, replay, and motif reinforcement",
        "RFC‑0006 §3.1": "Motif-field coherence across sessions",
        "RFC‑0007 §2.1, 3.2": "Ontology structure and loading mechanism"
      },
      "extended": {
        "RFC‑0005 §3.2": "Trace-free reentry support for motif lifecycle",
        "RFC‑0006 §4.2": "Field-curved retrieval based on attention salience",
        "RFC‑0007 §5": "Symbolic continuity without file-system tick loop"
      }
    },
    "test_case": {
      "description": "Simulates LLM context entry → motif storage → retrieval boost",
      "validates": [
        "attention_boosted recall",
        "LLM-driven reef query completion",
        "ontology replay continuity",
        "isolation of session memory"
      ]
    }
  },
  "public_exports": [
    "MotifMemoryTrace",
    "MotifMemoryManager",
    "LLMMemoryManager",
    "MemoryOrchestrator",
    "get_global_memory_manager"
  ],
  "main_test": {
    "description": "Runs 40 tick cycles with repeated access to two motifs (α, β), logging trace and final memory state"
  }
}
